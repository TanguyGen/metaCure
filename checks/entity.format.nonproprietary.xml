<?xml version="1.0" encoding="UTF-8"?>
  <mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
    <id>entity.type.nonproprietary</id>
    <name>Non proprietary entity format</name>
    <description>Check that all entities use non-propietary formats.</description>
    <type>reusable</type>
    <level>REQUIRED</level>
    <environment>python</environment>
    <code><![CDATA[
      library(stringr)
      # Check the data formats for all data entities.
      # The check fails if the specified data format matches a format marked as proprietary.
      # This check uses a reformatted copy of the DataONE format list, that is usually kept in the file 
      # /opt/local/metadig/DataONEformats.csv. This file is manually edited to mark specific formats as proprietary. This file is obtained using the DataONE 'formats'
      # service, i.e 'https://cn.dataone.org/cn/v2/formats'.
      
      # An additional step is made in this check - if any entities with a Microsoft Excel mediaType are found, then an informational message is printed as a tip to 
      # ensure that CSV files are included that correspond to the Excel file. As it is not possible to know if the dataset author has exported tabs from the
      # Excel file into more reusable CSV format, this tip is printed.

      maxPrint = 5
      excelMediaTypes = c("application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
      excelFileFound = FALSE
      
      isProprietary<-function(formats, thisFormat){
        for (row in formats){
          if (tolower(str_trim(row[3])) %in% c("yes", "y", "true", "t", "1")){
            if(tolower(str_trim(row[1],"both")) == tolower(str_trim(thisFormat,"both"))){
              return(TRUE)
            }
            if(tolower(str_trim(row[2],"both")) == tolower(str_trim(thisFormat,"both"))){
              return(TRUE)
            }
          }
        }
        return(FALSE)
      }
        
      dataFilename = "DataONEformats.csv"
      formatsFile = ""
      # Are any entity formats present?
      if (!exists("entityTypes") | is.null(entityTypes) ){
        message = "No data entities (files) were found so unable to check for proprietary formats."
        status = "FAILURE"
      }else if (!exists("mdq_params")){
        message = "Internal error running check, mdq_params not available to check."
        status = "ERROR"
        # The checks data directory is passed via the 'mdq_params' hash
        # The filename is known only to this check.
      }else{
        formatsFile = paste0(mdq_params['metadigDataDir'],"/",dataFilename)
        # Create list with the DataONE formats
        formats = list()
        fmtreader = read.csv(formatsFile, sep=',', quote ='"')
        for (row in fmtreader){
          formats=append(formats,row)
        }
          
        # If only a single value is returned (vs type "list"), then convert to a list
        # for easier processing
        if(length(entityTypes)==1){
          entityTypes = list(entityTypes)
        }
          
        
        proprietaryFound = list()
        
        # Check each entity format and see if it is in the 'proprietary' list, which
        # is based on all formats from DataONE that have been manually determined t  o be
        # proprietary
        for (i in range(0, len(entityTypes))){
          # Check if the entity format is a single string or arrayList
          thisFormat = str_trim(entityTypes[i],"both")
          if(isProprietary(formats, thisFormat)){
            proprietaryFound = append(proprietaryFound,thisFormat)
          }
          # Check if an Excel file was encountered
          if(tolower(str_trim(thisFormat,"both")) %in% excelMediaTypes){
            excelFileFound = TRUE
          }
        }
         
        
        if(length(proprietaryFound) > 0){
          output = paste0("It is recommended that non-proprietary file formats be used where possible. These ",len(fmts)," proprietary data formats (out of ",len(entityTypes)," total formats) were found: ",proprietaryFound[0:maxPrint],".")
          if(len(fmts) > maxPrint){
            output = paste0(output,"..")
          }
          if(excelFileFound){
            message = paste0(output," TIP: If you have not already, upload a csv version for any excel file(s) included.")
            status = "FAILURE"
          }else{
            message=output
            status = "FAILURE"
          }
        }else{
          if(excelFileFound){
            output = paste0(output," TIP: If you have not already, upload a csv version for any excel file(s) included.")
          }
          message=output
          status = "SUCCESS"
        }
      }
      mdq_result <- list(status = status,
                         output = list(list(value = message)))


      


    ]]></code>
    <selector>
    <name>entityTypes</name>
    <xpath>/eml/dataset/otherEntity/entityType</xpath>
    </selector>
    <selector>
    <name>entityNames</name>
    <xpath>/eml/dataset/otherEntity/entityNames</xpath>
    </selector>
    <dialect>
    <name>Ecological Metadata Language</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
    </dialect>
    </mdq:check>
    